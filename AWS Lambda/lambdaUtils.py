import uuid     #unique id
import typing   #typing for python typing

### Utils Functions

def get_random_id(type: str) -> typing.Union[int, str]:
    """Generate a random id based on the args

    Args:
        type (str): data type for the random id
            'B' -> binary
            'N' -> number
            'S' -> string

    Returns:
        id (type): random id generated by uuid
    """    
    #Todo need to consider binary 'B'
    id = uuid.uuid4()
    if(type == 'N'):
        return id.int >> 64
    return str(id)

def get_intent_name(intent_request: dict) -> str:
    '''
    Return the corrsponding intent 
    '''
    return intent_request["sessionState"]["intent"]["name"]


def get_session_attributes(intent_request: dict) -> dict:
    '''
    Return session attributes
    '''
    sessionState = intent_request["sessionState"]
    if "sessionAttributes" in sessionState:
        return sessionState["sessionAttributes"]
    return {}


def get_slots(intent_request: dict) -> dict:
    '''
    Return all the slots
    '''
    return intent_request["sessionState"]["intent"]["slots"]


def get_slot(intent_request: dict, slotName: str, original: bool = False) -> str:
    '''
    Return the corrrsponding slot or None
    '''
    slots = get_slots(intent_request)
    if slots is not None and slotName in slots and slots[slotName] is not None:
        val = slots[slotName]["value"]
        return val["originalValue"] if original else val["interpretedValue"]
    else:
        return None


### Response Functions
#Todo ConfirmIntent


'''
There are 5 type of dialog actions

- Close - Indicates that there will not be a response from the user.
          For example, the statement "Your order has been placed" does not require a response.

- ConfirmIntent - The next action is asking the user if the intent is complete and ready to be fulfilled.
                  This is a yes/no question such as "Place the order?"

- Delegate - The next action is determined by Amazon Lex V2.

- ElicitIntent - The next action is to elicit an intent from the user.

- ElicitSlot - The next action is to elicit a slot value from the user.
'''


def close(intent_request: dict, fulfillment_state: str, message: str) -> dict:
    intent_request["sessionState"]["intent"]["state"] = fulfillment_state
    return {
        "sessionState": {
            "sessionAttributes": get_session_attributes(intent_request),
            "dialogAction": {
                "type": "Close"
            },
            "intent": intent_request["sessionState"]["intent"]
        },
        "messages": [{
            "contentType": "PlainText",
            "content": message
        }] if message != None else None,
        "sessionId": intent_request["sessionId"],
        "requestAttributes": intent_request["requestAttributes"] if "requestAttributes" in intent_request else None
    }


def elicit_intent(intent_request, message):
    intent_request["sessionState"]["intent"]["state"] = "InProgress"
    return {
        "sessionState": {
            "dialogAction": {
                "type": "ElicitIntent"
            },
            "sessionAttributes": get_session_attributes(intent_request),
            "intent": intent_request["sessionState"]["intent"]
        },
        "messages": [{
            "contentType": "PlainText",
            "content": message
        }] if message != None else None,
        "requestAttributes": intent_request["requestAttributes"] if "requestAttributes" in intent_request else None
    }


def elicit_slot(intent_request, new_slot_name, message):
    intent_request["sessionState"]["intent"]["state"] = "InProgress"
    return {
        "sessionState": {
            "dialogAction": {
                "type": "ElicitSlot",
                "slotToElicit": new_slot_name
            },
            "sessionAttributes": get_session_attributes(intent_request),
            "intent": intent_request["sessionState"]["intent"]
        },
        "messages": [{
            "contentType": "PlainText",
            "content": message
        }] if message != None else None,
        "requestAttributes": intent_request["requestAttributes"] if "requestAttributes" in intent_request else None
    }